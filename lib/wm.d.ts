import * as React from 'react';
import { Component } from 'react';
import { WMProps, WMState } from './wmTypes';
import { Size } from './domain';
export declare class WM extends Component<WMProps, WMState> {
    private readonly wid;
    private headerElement;
    private contentElement;
    private wrapperElement;
    private headerHeight;
    private x;
    private y;
    private minWidth?;
    private minHeight?;
    private width?;
    private LastWidth?;
    private height?;
    private lastHeight?;
    private posX;
    private posY;
    private offsetX;
    private offsetY;
    private zIndex;
    private active;
    private deferred;
    private initialized;
    constructor(props: WMProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    private deferredUpdate;
    getState(): WMState;
    getId(): string;
    getTitle(): string;
    getSize(): Size;
    setSize(width: number, height: number): void;
    setHidden(hidden: boolean): void;
    isHidden(): boolean;
    isFullscreen(): boolean;
    fullscreen(): void;
    restore(): void;
    minimize(): void;
    onWindowResize: () => void;
    onMouseDown(e: React.MouseEvent, action: number): void;
    onMouseMove(e: MouseEvent): void;
    onMouseUp(): void;
    private renewPosition;
    private renewSize;
    updateSize(width: number | undefined, height: number | undefined): void;
    updatePosition(x: number, y: number): void;
    setActive(active: boolean, zIndex: number): void;
    getZIndex(): number;
    initialize(): void;
    saveHeaderRef(el: HTMLDivElement | null): void;
    saveContentRef(el: HTMLDivElement | null): void;
    saveWrapperRef(el: HTMLDivElement | null): void;
    renderHeader(): JSX.Element;
    renderContent(): JSX.Element;
    renderResizeHandles(): JSX.Element[] | null | undefined;
    render(): React.ReactPortal;
}
